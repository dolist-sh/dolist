name: CI 

on:
  push:
    paths-ignore:
      - "docs/**"
    branches:
      - "main"
  pull_request:
    paths-ignore:
    - "docs/**"
    branches:
      - "main"
jobs:
  test-server:
    name: test server
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: server
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #       Install & Configure Poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv 
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
            #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
    #----------------------------------------------
    #              run test suite
    #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
        # coverage report | NOT using coverage.py atm | More: https://pypi.org/project/coverage/
  test-app:
    name: test app ui
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #     Setup Node and install dependencies
      #----------------------------------------------
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: yarn install
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: yarn test:coverage
  deploy-to-dev:
    name: deploy to dev env
    needs: [test-server, test-app]
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Inject .env files
        env: 
          GITHUB_OAUTH_CLIENT_ID: ${{ secrets.CLIENT_ID_DEV }}
          GITHUB_OAUTH_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET_DEV }}
          GITHUB_OAUTH_REDIRECT_URI: ${{ secrets.OAUTH_REDIRECT_URI_DEV }}
          GITHUB_WEBHOOK_CALLBACK: ${{ secrets.PUSH_WEBHOOK_CALLBACK_DEV }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          WORKER_OAUTH_CLIENT_ID: ${{ secrets.WORKER_OAUTH_CLIENT_ID_DEV }}
          WORKER_OAUTH_CLIENT_SECRET: ${{ secrets.WORKER_OAUTH_CLIENT_SECRET_DEV }}
        run: |
          touch ./app/.env.local ./server/.env ./worker/.env

          echo "ENV=dev" >> ./app/.env.local
          echo "GITHUB_OAUTH_CLIENT_ID=$GITHUB_OAUTH_CLIENT_ID" >> ./app/.env.local
          echo "GITHUB_OAUTH_CLIENT_SECRET=$GITHUB_OAUTH_CLIENT_SECRET" >> ./app/.env.local
          echo "GITHUB_OAUTH_REDIRECT_URI=$GITHUB_OAUTH_REDIRECT_URI" >> ./app/.env.local

          echo "GITHUB_OAUTH_CLIENT_ID=$GITHUB_OAUTH_CLIENT_ID" >> ./server/.env
          echo "GITHUB_OAUTH_CLIENT_SECRET=$GITHUB_OAUTH_CLIENT_SECRET" >> ./server/.env
          echo "GITHUB_WEBHOOK_CALLBACK=$GITHUB_WEBHOOK_CALLBACK" >> ./server/.env
          echo "POSTGRES_USER=$POSTGRES_USERNAME" >> ./server/.env
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> ./server/.env
          echo "JWT_SECRET=$JWT_SECRET" >> ./server/.env

          echo "AWS_ACCESS_KEY=$AWS_ACCESS_KEY" >> ./worker/.env
          echo "AWS_SECRET_KEY=$AWS_SECRET_KEY" >> ./worker/.env
          echo "WORKER_OAUTH_CLIENT_ID=$WORKER_OAUTH_CLIENT_ID" >> ./worker/.env
          echo "WORKER_OAUTH_CLIENT_SECRET=$WORKER_OAUTH_CLIENT_SECRET" >> ./worker/.env

      - name: Deploy the code to EC2
        uses: easingthemes/ssh-deploy@v2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }} # https://zellwk.com/blog/github-actions-deploy/
          ARGS: "-rltgoDzvO --delete"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /var/dolist
          EXCLUDE: "/.next/, /node_modules/, /__pycache__/, /.git/, /docs/ "
      - name: Run a command
        run: |
          echo "Hello World" 
          exit 0