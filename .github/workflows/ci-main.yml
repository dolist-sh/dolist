name: CI 

on:
  push:
    paths-ignore:
      - "docs/**"
    branches:
      - "main"
  pull_request:
    paths-ignore:
    - "docs/**"
    branches:
      - "main"
jobs:
  test-server:
    name: test server
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: server
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #       Install & Configure Poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv 
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        env:
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        run: |
            git config --global url."https://$GIT_ACCESS_TOKEN@github.com".insteadOf "ssh://git@github.com"
            poetry install --no-interaction --no-root
            #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
    #----------------------------------------------
    #              run test suite
    #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
        # coverage report | NOT using coverage.py atm | More: https://pypi.org/project/coverage/
  test-app:
    name: test app ui
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #     Setup Node and install dependencies
      #----------------------------------------------
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: yarn install
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: yarn test:coverage
  deploy-to-dev:
    name: deploy to dev env
    needs: [test-server, test-app]
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Deploy the code to EC2
        uses: easingthemes/ssh-deploy@v2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }} # https://zellwk.com/blog/github-actions-deploy/
          ARGS: "-rltgoDzvO --delete"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: /var/dolist
          EXCLUDE: "/.next/, /node_modules/, /__pycache__/, /.git/, /docs/ "
      - name: Run a command
        run: |
          echo "Hello World" 
          exit 0